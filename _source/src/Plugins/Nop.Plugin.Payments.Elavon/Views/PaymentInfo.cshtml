@model Nop.Plugin.Payments.Elavon.Models.PaymentInfoModel 
 
<script> 
    (function () { 
        let lightbox, sessionId, orderCreated, originalSave, originalNextStep;
        const url = "@Model.LightboxUrl/client/library.js"; 
        const isOnePageCheckout = typeof ConfirmOrder !== "undefined";
 
        if (!document.querySelector(`script[src="${url}"]`)) { 
            const script = document.createElement("script"); 
            script.src = url; 
            script.onload = async function() { 
                const postData = addAntiForgeryToken(); 
                const formBody = new URLSearchParams(postData).toString() 
 
                try { 
                    const response = await fetch("@Url.Action("CreateOrder", "PaymentElavonPublic")", { 
                        method: "POST", 
                        headers: { 
                            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8" 
                        }, 
                        body: formBody 
                    }); 
 
                    sessionId = await response.text(); 
                } catch (err) { 
                    displayBarNotification("Payment method failed to load. Please try again.", "warning"); 
                } 
            }; 
            document.head.appendChild(script); 
        }

        if (isOnePageCheckout) {
            originalSave = ConfirmOrder.save; 
            originalNextStep = ConfirmOrder.nextStep; 
            const originalBack = ConfirmOrder.back;
     
            ConfirmOrder.save = runElavonLightbox;
     
            ConfirmOrder.nextStep = function() { 
                setTimeout(() => lightbox.show(), 0); 
            } 
     
            ConfirmOrder.back = function() { 
                ConfirmOrder.save = originalSave; 
                ConfirmOrder.nextStep = originalNextStep; 
                ConfirmOrder.back = originalBack; 
     
                return originalBack.apply(this, arguments); 
            }
        } else {
            $(function() {
                const $form = $("#confirm-order-form");
                
                // Unbind the existing submit handler that disables the button
                $form.off("submit");

                $form.on("submit", function(e) {
                    e.preventDefault();
                    
                    // Check terms of service if present
                    if ($("#termsofservice").length > 0 && !$("#termsofservice").is(":checked")) {
                        $("#terms-of-service-warning-box").dialog();
                        return false;
                    }
                    
                    runElavonLightbox(this);
                });
            });
        }
 
        function runElavonLightbox(form) { 
            const MessageTypes = window.ElavonLightbox.MessageTypes; 
 
            if (!lightbox) { 
                lightbox = new window.ElavonLightbox({ 
                    sessionId, 
                    onReady: (error) => { 
                        if (error) { 
                            displayBarNotification("Payment method failed to load. Please try again.", "warning"); 
                        } else { 
                            lightbox.show(); 
                        } 
                    }, 
                    messageHandler: (message, defaultAction) => { 
                        if (message.type === MessageTypes.transactionCreated) { 
                            if (orderCreated) {
                                if (isOnePageCheckout) {
                                    originalNextStep.call(ConfirmOrder, { success: true });
                                } else {
                                    const $button = $(form).find('button[type="submit"][name="nextstep"]');
                                    $button.prop("disabled", true);
                                    form.submit();
                                }
                            } else {
                                if (isOnePageCheckout) {
                                    originalSave.apply(ConfirmOrder, arguments);
                                } else {
                                    const $button = $(form).find('button[type="submit"][name="nextstep"]');
                                    $button.prop("disabled", true);
                                    form.submit();
                                }
                                orderCreated = true; 
                            } 
                        } 
                        defaultAction(); 
                    }, 
                }); 
            } else { 
                lightbox.show(); 
            } 
        } 
    })(); 
</script>
